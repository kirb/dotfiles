#!/bin/bash
# config
cd ~
shopt -s dotglob

# functions
status() {
	printf "\e[0;32m==> \e[1;39m%s…\e[m\n" "$1" >&2
}

unsafe_run() {
	printf "\e[0;36m==> \e[1;39m%s\e[m\n" "$*" >&2
	"$@"
}

run() {
	unsafe_run "$@"
	result=$?

	if [[ $result != 0 ]]; then
		printf "\e[0;31m==> \e[1;31mError:\e[m %s\n" "Return code $result"
		exit $result
	fi
}

wait_for_process() {
	status "Waiting for $1"

	while pgrep "$1" >/dev/null 2>/dev/null; do
		sleep 5
	done
}

add_login_item() {
	hide=false
	[[ $2 == --hide ]] && hide=true

	run osascript -e 'tell application "System Events" to make login item at end with properties {path:"'$1'", hidden:'$hide'}'
}

add_dock_item() {
	[[ -d "$1" ]] && run dockutil --add "$1" --no-restart
}

add_dock_spacer() {
	run dockutil --add "" --type spacer --section apps --no-restart
}

open_if_exists() {
	[[ -d "$1" ]] && run open "$1"
}

# -1: request and retain sudo permission
has_sudo=0

if sudo -v; then
	has_sudo=1

	# Keep-alive: update existing `sudo` time stamp until `.osx` has finished
	while :; do
		sudo -n true
		sleep 60
		kill -0 "$$" || exit
	done 2>/dev/null &
else
	status "Elevation failed. Will skip commands requiring sudo"
fi

# 0: install xcode command line tools
status "Installing Command Line Tools"
echo "If using Xcode, make sure to launch Xcode at least once to install components. ^C here if needed."
echo -n "Use Xcode? [Yn] "
read answer

if [[ $answer == n ]]; then
	xcode-select --install
	wait_for_process "Install Command Line Developer Tools"
else
	# get the path to Xcode.app based on the xcode-select path
	xcode="$(realpath "$(xcode-select --print-path)"/../..)"
fi

# 6: clone dotfiles
status "Cloning dotfiles"
if [[ ! -d ~/.dotfiles ]]; then
	run git clone --recursive https://github.com/kirb/dotfiles.git ~/.dotfiles
fi

for i in .gitconfig .lldbinit .nanorc .nicrc .theosrc .timidity.cfg; do
	if [[ ! -f ~/$i ]]; then
		run ln -s .dotfiles/$i ~/$i
	fi
done

if [[ ! -f ~/.config/htop/htoprc ]]; then
	run mkdir -p ~/.config/htop
	run ln -s ../../.dotfiles/.htoprc ~/.config/htop/htoprc
fi

if ! grep -q dotfiles ~/.zshrc; then
	run echo "source ~/.dotfiles/.zshrc" >> ~/.zshrc
fi

if [[ ! -d ~/.ssh ]]; then
	run mkdir ~/.ssh
fi

# 7: clone theos
if [[ ! -d ~/theos ]]; then
	status "Cloning theos"
	run git clone --recursive https://github.com/theos/theos.git ~/theos
fi

# 8: set defaults
status "Setting preferences"
if [[ $has_sudo == 1 ]]; then
	# use ntp.org as the time server
	run sudo /usr/sbin/systemsetup -setnetworktimeserver au.pool.ntp.org
fi
# set the highlight color (green)
run defaults write NSGlobalDomain AppleHighlightColor -string "0.482353 0.925000 0.254902"
# use 24 hour time
run defaults write NSGlobalDomain AppleICUForce12HourTime -bool NO
# use dark system theme
run defaults write NSGlobalDomain AppleInterfaceStyle -string Dark
# allow tabbing through UI elements
run defaults write NSGlobalDomain AppleKeyboardUIMode -int 3
# double click window title bar to minimise
run defaults write NSGlobalDomain AppleMiniaturizeOnDoubleClick -bool NO
# disable press and hold to show character variations
run defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool NO
# show all file extensions
run defaults write NSGlobalDomain AppleShowAllExtensions -bool YES
# show hidden files
run defaults write NSGlobalDomain AppleShowAllFiles -bool YES
# use overlay-style scrollbars
run defaults write NSGlobalDomain AppleShowScrollBars -string WhenScrolling
# use tap to click
run defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
run defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
# don’t wait forever for key repeat when holding down a key
run defaults write NSGlobalDomain InitialKeyRepeat -int 25
run defaults -currentHost write NSGlobalDomain InitialKeyRepeat -int 25
# enable keys to be held down and repeated at a decently fast rate
run defaults write NSGlobalDomain KeyRepeat -int 6
run defaults -currentHost write NSGlobalDomain KeyRepeat -int 6
# don't make fancy hyphens when typing dashes
run defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool NO
# don't make fancy quotes when typing straight quotes
run defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool NO
# don't use autocorrect
run defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool NO
# never save to icloud by default
run defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool NO
# always expand save panel
run defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool YES
run defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool YES
# show control characters for non-ascii chars
run defaults write NSGlobalDomain NSTextShowsControlCharacters -bool YES
# halve animation duration of panels
run defaults write NSGlobalDomain NSWindowResizeTime -float 0.1
# always expand print panel
run defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool YES
run defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool YES
# enable selection in quick look
run defaults write NSGlobalDomain QLEnableTextSelection -bool YES
# make apps that use sparkle show the “check for updates?” prompt on first run
run defaults write NSGlobalDomain SUHasLaunchedBefore -bool YES
# always show inspect element in WebViews
run defaults write NSGlobalDomain WebKitDeveloperExtras -bool YES
# set activity monitor disk graph to data (default is IO)
run defaults write com.apple.ActivityMonitor DiskGraphType -int 1
# set network graph to data (default is packets)
run defaults write com.apple.ActivityMonitor NetworkGraphType -int 1
# update stats every 2 seconds
run defaults write com.apple.ActivityMonitor UpdatePeriod -int 2
# enable firewall
run defaults -currentHost write com.apple.alf globalstate -int 1
# destroy dashboard (actually not needed on elcap!)
run defaults write com.apple.dashboard mcx-disabled -bool YES
# the infamous don’t create .DS_Store in network drives preference
run defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool YES
# remove delay before showing/hiding dock
run defaults write com.apple.dock autohide-delay -float 0
# use suck minimise/restore effect
run defaults write com.apple.dock mineffect -string suck
# do not change sort order of spaces based on use
run defaults write com.apple.dock mru-spaces -bool NO
# put the dock on the left
# run defaults write com.apple.dock orientation -string left
# make icons reasonably small
run defaults write com.apple.dock tilesize -int 38
# configure buttons for mighty mouse (set scroll velocity, add middle click, 360º scrolling)
run defaults write com.apple.driver.AppleHIDMouse Button1 -int 1
run defaults write com.apple.driver.AppleHIDMouse Button2 -int 2
run defaults write com.apple.driver.AppleHIDMouse Button3 -int 3
run defaults write com.apple.driver.AppleHIDMouse Button4 -int 4
run defaults write com.apple.driver.AppleHIDMouse Button4Click -int 0
run defaults write com.apple.driver.AppleHIDMouse Button4Force -int 0
run defaults write com.apple.driver.AppleHIDMouse ButtonDominance -int 1
run defaults write com.apple.driver.AppleHIDMouse ScrollH -int 1
run defaults write com.apple.driver.AppleHIDMouse ScrollS -int 0
run defaults write com.apple.driver.AppleHIDMouse ScrollSSize -int 30
run defaults write com.apple.driver.AppleHIDMouse ScrollV -int 1
# don’t open Finder when connecting an iOS device
run defaults write com.apple.AMPDevicesAgent dontAutomaticallySyncIPods -bool YES
# use tabs for indentation in xcode
run defaults write com.apple.dt.Xcode DVTTextIndentUsingTabs -bool YES
# searches occur in the current folder, not everywhere
run defaults write com.apple.finder FXDefaultSearchScope -string SCcf
# set finder to use column view by default
run defaults write com.apple.finder FXPreferredViewStyle -string clmv
# set the new window target to the home directory
run defaults write com.apple.finder NewWindowTarget -string PfHm
run defaults write com.apple.finder NewWindowTargetPath -string "file://$HOME/"
# allow quitting finder
run defaults write com.apple.finder QuitMenuItem -bool YES
# show/don't show these types of volumes on the desktop
run defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool YES
run defaults write com.apple.finder ShowHardDrivesOnDesktop -bool NO
run defaults write com.apple.finder ShowMountedServersOnDesktop -bool YES
run defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool YES
# show finder path bar
run defaults write com.apple.finder ShowPathbar -bool YES
# show finder status bar
run defaults write com.apple.finder ShowStatusBar -bool YES
# DO NOT OPEN THE FRIGGIN PHOTOS APP WHEN I PLUG IN A DEVICE
run defaults write com.apple.ImageCapture disableHotPlug -bool YES
# enable full screen in ios simulator
run defaults write com.apple.iphonesimulator AllowFullscreenMode -bool YES
# disable pressing power button to sleep
run defaults write com.apple.loginwindow PowerButtonSleepsSystem -bool NO
# when copying an email address, don't include the name
run defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool NO
# don’t bother me if an email can’t be sent, just keep trying. why isn’t this the default????
run defaults write com.apple.mail SuppressDeliveryFailure -bool YES
# set the format of the clock menu bar item
run defaults write com.apple.menuextra.clock DateFormat -string "EEE d MMM  HH:mm:ss"
# enable airdrop over ethernet
run defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool YES
# reduce duration banners are displayed
run defaults write com.apple.notificationcenterui bannerTime -int 4
# play the power chime even on macbooks that don’t usually play it
run defaults write com.apple.PowerChime ChimeOnAllHardware -bool YES
# quit printer app once jobs have finished
run defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool YES
# don't automatically open anything
run defaults write com.apple.Safari AutoOpenSafeDownloads -bool NO
# use about:blank as safari home page
run defaults write com.apple.Safari HomePage -string about:blank
# enable the safari develop menu
run defaults write com.apple.Safari IncludeDevelopMenu -bool YES
run defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool NO
run defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool YES
# show full url in safari address bar
run defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool YES
# save screen captures to /tmp instead of cluttering the desktop
run defaults write com.apple.screencapture location /tmp
# show clock on the screen saver
run defaults write com.apple.screensaver showClock -bool YES
run defaults -currentHost write com.apple.screensaver showClock -bool YES
# require password when coming back from screen saver
run defaults write com.apple.screensaver askForPassword -bool YES
# but only after 5 seconds
run defaults write com.apple.screensaver askForPasswordDelay -int 5
# check for updates daily
run defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
# don't reopen previous windows on next login
run defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool NO
# use sosumi as system beep
run defaults write com.apple.systemsound com.apple.sound.beep.sound -string /System/Library/Sounds/Sosumi.aiff
# don’t show time machine prompt on connecting an external hdd
run defaults -currentHost write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool YES
# allow ctrl-scroll to zoom
run defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool YES
# don't smoothen the image when zooming
run defaults write com.apple.universalaccess closeViewSmoothImages -bool NO
# follow keyboard focus while zoomed
run defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool YES
# set highlight command line flags for QLColorCode
run defaults write org.n8gray.QLColorCode extraHLFlags '-lV -t2'
# use fira code for QLColorCode
run defaults write org.n8gray.QLColorCode font 'Fira Code'
# set color scheme for QLColorCode
run defaults write org.n8gray.QLColorCode hlTheme blacknblue
# for some reason it doesn’t see highlight despite saying it checks /usr/local/bin…
run defaults write org.n8gray.QLColorCode pathHL $brewdir/bin/highlight
# set iterm2 custom prefs dir
run defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool YES
run defaults write com.googlecode.iterm2 PrefsCustomFolder -string ~/.dotfiles
# kill the skype first run tutorial
run defaults write com.skype.skype SKShowWelcomeTour -bool NO
# kill the vmware fusion menu bar item
run defaults write com.vmware.fusion showStartMenu3 -int 0
# extract to the same folder as the archive
run defaults write cx.c3.theunarchiver extractionDestination -bool YES
# make the folder have the timestamp of the archive
run defaults write cx.c3.theunarchiver folderModifiedDate -int 2
# delete the archive after extracting
run defaults write cx.c3.theunarchiver deleteExtractedArchive -bool YES
# set file dates to the same as in the archive
run defaults write cx.c3.theunarchiver changeDateOfFiles -bool YES
# open the extracted folder on completion
run defaults write cx.c3.theunarchiver openExtractedFolder -bool YES
# hide spotify notifications icon
run defaults write io.citruspi.Spotify-Notifications iconSelection -int 2
# disable spotify notification sounds – this is inverted for some reason
run defaults write io.citruspi.Spotify-Notifications notificationSound -int 1
# keep previous songs in the notification center – this is also inverted
run defaults write io.citruspi.Spotify-Notifications onlycurrentsong -int 1
# disable auto-opening of captive portal web pages
if [[ $has_sudo == 1 ]]; then
	run sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.captive.control Active -bool NO
fi

# 1: install homebrew
if [[ ! -d ~/homebrew && ! -d /usr/local/Homebrew ]]; then
	status "Installing Homebrew"

	if [[ $has_sudo == 1 ]]; then
		run bash -c 'curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install -o /tmp/install_homebrew.rb'
		echo "Confirm /tmp/install_homebrew.rb isn’t doing anything scary and press return to continue"
		read
		run ruby /tmp/install_homebrew.rb
	else
		run git clone https://github.com/Homebrew/brew.git ~/homebrew
	fi
fi

if [[ $has_sudo == 0 ]]; then
	run echo "export PATH=~/homebrew/bin:$PATH" >> ~/.zshrc
fi

brewdir=$(run brew --prefix)

# 2: install bundle
status "Installing Homebrew Bundle"
run brew tap homebrew/bundle

# 3: process brewfile
status "Installing from Brewfile"
# run two instances of brew bundle at once for teh speed; make sure both finish before continuing
run osascript -e 'tell application "Terminal" to do script "cd ~/.dotfiles; brew bundle --verbose & echo $! > /tmp/setupmacos_brew_pid"'
unsafe_run bash -c 'cd ~/.dotfiles; brew bundle --verbose'

other_brew_pid=$(cat /tmp/setupmacos_brew_pid)

if kill -0 $other_brew_pid 2>/dev/null; then
	echo "Waiting for other brew task to complete…"

	while kill -0 $other_brew_pid 2>/dev/null; do
		sleep 5
	done
fi

# run it one more time to ensure we haven’t missed anything, especially due to pkgconfig locks
run bash -c 'cd ~/.dotfiles; brew bundle --verbose'

# 4: force link certain formulae
status "Force linking formulae"
# android-platform-tools is a dick and links its own sqlite3 for some reason. ugh
[[ -h /usr/local/bin/sqlite3 ]] && run rm /usr/local/bin/sqlite3
run brew link --force bzip2 curl perl sqlite3

# TODO: class-dump is broken

for i in $brewdir/opt/{coreutils,findutils,gnu-sed,gnu-tar,gnu-which,grep,make}/bin/g*; do
	name=$(basename $i)
	newname=$brewdir/bin/${name:1}

	if [[ ! -f $newname ]]; then
		run ln -s $i $newname
	fi
done

# 5: install font
status "Setting up fonts"

if [[ -f /Applications/Utilities/Terminal.app/Contents/Resources/Fonts/SFMono-* && ! -f ~/Library/Fonts/SFMono-* ]]; then
	cp /Applications/Utilities/Terminal.app/Contents/Resources/Fonts/SFMono-* ~/Library/Fonts/
elif [[ -f /System/Applications/Utilities/Terminal.app/Contents/Resources/Fonts/SFMono-* && ! -f ~/Library/Fonts/SFMono-* ]]; then
	cp /System/Applications/Utilities/Terminal.app/Contents/Resources/Fonts/SFMono-* ~/Library/Fonts/
fi

curl -# https://rawgit.com/gabrielelana/awesome-terminal-fonts/patching-strategy/patched/SourceCodePro+Powerline+Awesome+Regular.ttf -o ~/Library/Fonts/SourceCodePro+Powerline+Awesome+Regular.ttf

# 9: set up apps
status "Setting up apps"

open_if_exists $brewdir/Caskroom/backblaze/latest/Backblaze Installer.app
open_if_exists $brewdir/Caskroom/lastpass/latest/LastPass\ Installer/LastPass\ Installer.app
open_if_exists /Applications/Backup\ and\ Sync.app
open_if_exists /Applications/Google\ Drive\ File\ Stream.app
open_if_exists /Applications/iStat\ Menus.app
open_if_exists /Applications/RescueTime.app
open_if_exists /Applications/Skype.app
open_if_exists /Applications/Spotify.app
open_if_exists /Applications/Spotify\ Notifications.app
open_if_exists /Applications/Textual.app
open_if_exists /Applications/The\ Unarchiver.app
open_if_exists /Applications/Tweetbot.app

add_login_item /Applications/Mail.app --hide

# TODO: kill spotify from the login items list after it launches

if [[ ! -d /Applications/Screen\ Sharing.app ]]; then
	ln -s /System/Library/CoreServices/Applications/Screen\ Sharing.app /Applications/Screen\ Sharing.app
fi

# 10: set up the dock
echo -n "Reset the Dock? [Yn] "
read answer

if [[ $answer != n ]]; then
	dockutil --remove all --no-restart
	add_dock_item /Applications/Firefox\ Developer\ Edition.app
	add_dock_spacer
	add_dock_item /Applications/iTerm.app
	add_dock_item /Applications/Visual\ Studio\ Code.app

	if [[ ! -z "$xcode" ]]; then
		add_dock_item "$xcode"
		add_dock_item "$xcode"/Contents/Developer/Applications/Simulator.app
	fi

	add_dock_item /Applications/Hopper\ Disassembler\ v*.app
	add_dock_item /Applications/Utilities/Console.app
	add_dock_spacer
	add_dock_item /Applications/Mail.app
	add_dock_item /Applications/IRCCloud.app
	add_dock_item /Applications/Discord.app
	add_dock_item /Applications/Tweetbot.app
	add_dock_item /Applications/Telegram.app
	add_dock_item /Applications/Messages.app
	add_dock_spacer
	add_dock_item /Applications/Adobe\ Photoshop\ */Adobe Photoshop\ *.app
	add_dock_item /Applications/Adobe\ Premiere\ Pro\ */Adobe Premiere\ Pro\ *.app
	add_dock_item /Applications/Adobe\ Audition\ */Adobe Audition\ *.app
	add_dock_item /Applications/Pixelmator.app
	add_dock_item /Applications/Final Cut Pro.app
	add_dock_spacer
	add_dock_item /Applications/iTunes.app
	add_dock_item /Applications/Spotify.app
	add_dock_item /Applications/Microsoft\ Remote\ Desktop\ Beta.app
	add_dock_item /Applications/Screen\ Sharing.app
	add_dock_item /Applications/VMware\ Fusion.app
	add_dock_item /Applications/Microsoft\ Word.app
	add_dock_spacer
	add_dock_item /Applications/System\ Preferences.app
	add_dock_item /Applications/Utilities/Activity\ Monitor.app
fi

# 11: set default shell
status "Setting shell to zsh"

if [[ $has_sudo == 1 ]]; then
	echo $brewdir/bin/zsh | sudo tee -a /etc/shells >/dev/null
	chsh -s $brewdir/bin/zsh
else
	echo "Not possible without sudo. Set $brewdir/bin/zsh as the login shell in iTerm2 profile."
fi

# 12: we're done
status "Done! Reboot now"
run killall Dock Finder Notification\ Center SystemUIServer
