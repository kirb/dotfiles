#!/bin/bash
# Config
cd ~
shopt -s dotglob

# Functions
status() {
	printf "\e[0;32m==> \e[1;39m%sâ€¦\e[m\n" "$1" >&2
}

unsafe_run() {
	printf "\e[0;36m==> \e[1;39m%s\e[m\n" "$*" >&2
	"$@"
}

run() {
	unsafe_run "$@"
	result=$?

	if [[ $result != 0 ]]; then
		printf "\e[0;31m==> \e[1;31mError:\e[m %s\n" "Return code $result"
		exit $result
	fi
}

wait_for_process() {
	status "Waiting for $1"

	while pgrep "$1" >/dev/null 2>/dev/null; do
		sleep 5
	done
}

has() {
	hash "$1" 2>/dev/null
}

open_if_exists() {
	[[ -d "$1" ]] && run open "$1"
}

# -1: Sanity check the distro
[[ -f /etc/lsb-release ]] && source /etc/lsb-release

if [[ $DISTRIB_ID != Ubuntu ]]; then
	echo "This script is only tested on Ubuntu. Aborting." >&2
	exit 1
fi

[[ $UID != 0 ]] && SUDO=sudo

# 1: Add repos
status "Adding repos"
DEB_HOST_ARCH=$(dpkg --print-architecture)

# apt-fast
if ! has apt-fast; then
	run curl -fsSL 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1ee2ff37ca8da16b' | $SUDO gpg --dearmor -o /usr/share/keyrings/apt-fast.gpg >/dev/null
	run printf 'deb [arch=%s signed-by=%s] %s %s main\n' $DEB_HOST_ARCH /usr/share/keyrings/apt-fast.gpg http://ppa.launchpad.net/apt-fast/stable/ubuntu/ $DISTRIB_CODENAME | $SUDO tee /etc/apt/sources.list.d/apt-fast.list
fi

# node.js
if ! has node; then
	run curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | $SUDO gpg --dearmor -o /usr/share/keyrings/nodesource.gpg
	run printf 'deb [arch=%s signed-by=%s] %s %s main\n' $DEB_HOST_ARCH /usr/share/keyrings/nodesource.gpg https://deb.nodesource.com/node_20.x nodistro | $SUDO tee /etc/apt/sources.list.d/nodesource.list
fi

# Docker
if ! has docker; then
	run curl -fsSL https://download.docker.com/linux/ubuntu/gpg | $SUDO gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
	run printf 'deb [arch=%s signed-by=%s] %s %s stable\n' $DEB_HOST_ARCH /usr/share/keyrings/docker-archive-keyring.gpg https://download.docker.com/linux/ubuntu $DISTRIB_CODENAME | $SUDO tee /etc/apt/sources.list.d/docker.list
fi

# eza
if ! has eza; then
	run curl -fsSL https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | $SUDO gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
	run printf "deb [arch=%s signed-by=%s] %s stable main\n" $DEB_HOST_ARCH /etc/apt/keyrings/gierens.gpg http://deb.gierens.de/ | $SUDO tee /etc/apt/sources.list.d/gierens.list
fi

# 2: Install stuff
status "Installing packages"
export DEBIAN_FRONTEND=noninteractive
# Set debconf defaults
cat <<EOT | $SUDO debconf-set-selections
apt-fast apt-fast/aptmanager select apt
apt-fast apt-fast/dlflag select true
apt-fast apt-fast/maxdownloads select 16
EOT
run $SUDO apt-get update
run $SUDO apt-get install -yq apt-fast
run $SUDO apt-fast dist-upgrade -yq
run $SUDO apt-fast install -yq \
	build-essential dpkg-dev git fontconfig \
	zsh zsh-autosuggestions zsh-syntax-highlighting \
	htop iotop iftop powertop tmux \
	bat eza fzf \
	nano imagemagick jq p7zip-full zip unzip zstd openssh-client rsync curl wget aria2 optipng pv \
	android-sdk-platform-tools \
	libimobiledevice-utils usbmuxd libplist-utils \
	fonts-roboto fonts-noto-color-emoji \
	nodejs \
	docker-ce docker-ce-cli containerd.io
# Extra packages only available later than focal
[[ ${DISTRIB_RELEASE%.*} -ge 21 ]] && run $SUDO apt-fast install -yq \
	fonts-jetbrains-mono fonts-inter fonts-inter-variable
run $SUDO apt-fast autoremove -yq
run $SUDO apt-fast clean -q

# 3: Install pnpm
status "Installing pnpm"
run $SUDO npm upgrade -g npm
if [[ -z $PNPM_HOME ]]; then
	PNPM_HOME=$HOME/.local/share/pnpm
	[[ $VENDOR == apple ]] && PNPM_HOME=$HOME/Library/pnpm
fi
export PNPM_HOME
PATH="$PNPM_HOME:$PATH"
run mkdir -p "$PNPM_HOME"

if has pnpm; then
	run pnpm install -g pnpm@latest
else
	run npx pnpm@latest install -g pnpm@latest
fi

# 4: Configure user groups
status "Adding user to docker group"
if [[ $UID != 0 ]]; then
	run $SUDO usermod -aG docker $USER
fi

# 5: Set login shell
status "Setting shell to zsh"
run $SUDO chsh -s $(command -v zsh) $USER

# 6: Clone submodules, because vscode devcontainer doesn't do that automatically
status "Cloning submodules"
(cd ~/.dotfiles; run git submodule update --init --recursive)

# 7: Done
status "Done! Reboot now"
